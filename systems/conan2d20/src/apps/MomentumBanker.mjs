// A form used to spend or bank personal momentum generated by skill tests.
//
export default class MomentumBanker extends FormApplication {
	constructor(object, options={}) {
		super(object, options);

		this.actor = object;
		this.toBank = this.actor.system.momentum;

		this.bankType = options.bankType
			? options.bankType
			: this.actor.type === "character" ? "momentum" : "doom";

		this.toSpend = 0;
	}

	static get defaultOptions() {
		return foundry.utils.mergeObject(super.defaultOptions, {
			id: "momentum-banker",
			classes: ["conan2d20", "momentum-banker"],
			template: "systems/conan2d20/templates/apps/momentum-banker.hbs",
			width: 400,
			height: "auto",
			submitOnChange: false,
		});
	}

	get title() {
		return `${game.i18n.localize("CONAN.rollMomentumSpendTitle")}`;
	}

	activateListeners(html) {
		super.activateListeners(html);

		html.find("#momentumSpend").on("input", event => {
			this.toSpend = parseInt(event.target.value);
			this.toBank = this.actor.system.momentum - this.toSpend;
			const buttonText = `Spend: ${this.toSpend}, Bank: ${this.toBank}`;
			html.find("#spendBankButton").html(buttonText);
		});

		html.find("#spendBankButton").click(() => {
			if (this.bankType === "momentum") {
				conan.apps.Counter.changeCounter(this.toBank, "momentum");
			}
			else {
				conan.apps.Counter.changeCounter(this.toBank, "doom");
			}

			this.momentumChatMessage(this.bankType);

			// Now reset the unbanked momentum to zero as it has been spent
			this.actor.update({"system.momentum": 0});

			this.close();
		});
	}

	getData() {
		const data = {
			personalMomentum: this.actor.system.momentum,
		};

		return data;
	}

	momentumChatMessage(poolType) {
		let html = `<h2>${game.i18n.localize(
			"CONAN.rollMomentumBanked"
		)}</h2><div>`;

		html += `<p>${game.i18n.format("CONAN.rollMomentumBankedChatText", {
			character: `<b>${this.actor.name}</b>`,
			spent: `<b>${this.toSpend}</b>`,
			banked: `<b>${this.toBank}</b>`,
			poolType: `<b>${poolType}</b>`,
		})}</p></div>`;

		const chatData = {
			user: game.user.id,
			content: html,
		};

		ChatMessage.create(chatData);
	}
}
